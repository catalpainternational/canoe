<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <title>{{ htmlWebpackPlugin.options.title }}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    {{#if htmlWebpackPlugin.options.include_ga }}
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id={{ htmlWebpackPlugin.options.ga_tag }}"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() {
            dataLayer.push(arguments);
        }
        gtag("js", new Date());

        gtag("config", "{{ htmlWebpackPlugin.options.ga_tag }}", {
            send_page_view: false,
            custom_map: {
                dimension1: "User Id",
                dimension2: "Groups",
                dimension3: "Lesson",
                dimension4: "Question",
                dimension5: "Answer",
                metric1: "Is a Correct Answer",
            },
        });
    </script>
    {{/if}}
</head>

<body>
    <div id="preapp-messages">
        <img src="{{ htmlWebpackPlugin.options.favicon_path }}" />

        <div id="service-worker-loading">
            {{> $index_partials/please_wait.hbs}}
        </div>
        <div id="service-worker-notsupported" hidden>
            {{> $index_partials/update_browser.hbs}}
        </div>
        <div id="service-worker-failed" onclick="location.reload()" hidden>
            {{> $index_partials/try_again.hbs}}
        </div>
    </div>
    <App> </App>
    <style>
        html {
            height: 100%;

            background-color: {
                    {
                    htmlWebpackPlugin.options.background_color
                }
            }

            ;
        }

        #preapp-messages div {
            padding-top: 100px;
            height: 100%;
        }

        #preapp-messages {
            height: 100%;
            margin: -8px;
            width: auto;

            color: {
                    {
                    htmlWebpackPlugin.options.theme_color
                }
            }

            ;
            padding: 30px;
            font-family: Verdana;
            font-size: xx-large;
            text-align: center;
        }

        #preapp-messages img {
            margin: 10px 10px 10px 10px;
            max-height: 100px;
        }
    </style>
        <script>
        const MANIFEST_CACHE_NAME = "manifest-cache";
        const MANIFEST_URL = "{{{ htmlWebpackPlugin.options.api_base_url }}}/manifest";
        const EMPTY_SLATE_BOOT_KEY = "empty_slate_boot";
        var webpack_script_sources = [
            {{# each htmlWebpackPlugin.tags.bodyTags }}
            new DOMParser().parseFromString(new DOMParser().parseFromString("{{this}}", "text/html").documentElement.innerText, "text/html").scripts[0].src,
            {{/each}}
        ];
        window.onload = (event) => {
            // First deduce whether we're in blank slate state vs preseeded state, by checking for a cached manifest.
            // Only then boot the app, so that Riot can synchronously access this fact.
            caches.keys()
                .then(cachenames => {
                    if (cachenames.indexOf(MANIFEST_CACHE_NAME) < 0) {
                        sessionStorage.setItem(EMPTY_SLATE_BOOT_KEY, true);
                        return true;
                    }
                    else {
                        return caches.open(MANIFEST_CACHE_NAME)
                        .then(thecache => {
                            return thecache.match(MANIFEST_URL);
                        })
                        .then(manifest => {
                            let is_empty_slate_boot = (manifest === undefined);
                            sessionStorage.setItem(EMPTY_SLATE_BOOT_KEY, is_empty_slate_boot);
                            return is_empty_slate_boot;
                        })
                    }
                })
                .catch(err => console.error)
                .then(_whevs => {
                    webpack_script_sources.forEach(src => {
                        script = document.createElement("script");
                        script.src = src;
                        script.type = 'application/javascript';
                        script.async = false;
                        script.defer = true;
                        document.head.appendChild(script);
                    });
                });
        };
    </script>
</body>

</html>